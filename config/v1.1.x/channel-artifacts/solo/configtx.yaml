# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

---
################################################################################
#
#   PROFILES
#
#   Different configuration profiles may be encoded here to be specified as
#   parameters to the configtxgen tool. The profiles which specify consortiums
#   are to be used for generating the orderer genesis block. With the correct
#   consortium members defined in the orderer genesis block, channel creation
#   requests may be generated with only the org member names and a consortium
#   name.
#
################################################################################
Profiles:

    # SampleSingleMSPSoloV1_1 mimics the SampleSingleMSPSolo definition but
    # additionally defines the v1.1 only capabilities which do not allow a
    # mixed v1.0.x v1.1.x network.
    MPLOrg:
        Capabilities:
            <<: *ChannelCapabilities
        Orderer:
            <<: *OrdererDefaults
            OrdererType: solo
            Organizations:
                - *Org0
            Capabilities:
                <<: *OrdererCapabilities
        Consortiums:
            SampleConsortium:
                Organizations:
                    - *Org1
                    - *Org2

    # SampleSingleMSPChannelV1_1 defines a channel just as
    # SampleSingleMSPChannel. However, it also defines the capabilities map which
    # makes this channel incompatible with v1.0.x peers.
    MPLOrgChannel:
        Consortium: SampleConsortium
        Application:
            Organizations:
                - *Org1
                - *Org2
            Capabilities:
                <<: *ApplicationCapabilities

################################################################################
#
#   ORGANIZATIONS
#
#   This section defines the organizational identities that can be referenced
#   in the configuration profiles.
#
################################################################################
Organizations:

    # SampleOrg defines an MSP using the sampleconfig. It should never be used
    # in production but may be used as a template for other definitions.
    - &Org0
        # Name is the key by which this org will be referenced in channel
        # configuration transactions.
        # Name can include alphanumeric characters as well as dots and dashes.
        Name: OrdererOrg

        # ID is the key by which this org's MSP definition will be referenced.
        # ID can include alphanumeric characters as well as dots and dashes.
        ID: OrdererOrgMSP

        # MSPDir is the filesystem path which contains the MSP configuration.
        MSPDir: ../../cas/mspconfig/OrdererOrg/msp

        ## AdminPrincipal dictates the type of principal used for an
        ## organization's Admins policy. Today, only the values of Role.ADMIN and
        ## Role.MEMBER are accepted, which indicates a principal of role type
        ## ADMIN and role type MEMBER respectively.
        #AdminPrincipal: Role.ADMIN

        ## AnchorPeers defines the location of peers which can be used for
        ## cross-org gossip communication. Note, this value is only encoded in
        ## the genesis block in the Application section context.
        #AnchorPeers:
        #    - Host: 127.0.0.1
        #      Port: 7051

    # SampleOrg defines an MSP using the sampleconfig. It should never be used
    # in production but may be used as a template for other definitions.
    - &Org1
        # Name is the key by which this org will be referenced in channel
        # configuration transactions.
        # Name can include alphanumeric characters as well as dots and dashes.
        Name: Org1

        # ID is the key by which this org's MSP definition will be referenced.
        # ID can include alphanumeric characters as well as dots and dashes.
        ID: Org1MSP

        # MSPDir is the filesystem path which contains the MSP configuration.
        MSPDir: ../../cas/mspconfig/Org1/msp

        # AdminPrincipal dictates the type of principal used for an
        # organization's Admins policy. Today, only the values of Role.ADMIN and
        # Role.MEMBER are accepted, which indicates a principal of role type
        # ADMIN and role type MEMBER respectively.
        AdminPrincipal: Role.ADMIN

        # AnchorPeers defines the location of peers which can be used for
        # cross-org gossip communication. Note, this value is only encoded in
        # the genesis block in the Application section context.
        AnchorPeers:
            - Host: peer1.1
              Port: 7051

    # SampleOrg defines an MSP using the sampleconfig. It should never be used
    # in production but may be used as a template for other definitions.
    - &Org2
        # Name is the key by which this org will be referenced in channel
        # configuration transactions.
        # Name can include alphanumeric characters as well as dots and dashes.
        Name: Org2

        # ID is the key by which this org's MSP definition will be referenced.
        # ID can include alphanumeric characters as well as dots and dashes.
        ID: Org2MSP

        # MSPDir is the filesystem path which contains the MSP configuration.
        MSPDir: ../../cas/mspconfig/Org2/msp

        # AdminPrincipal dictates the type of principal used for an
        # organization's Admins policy. Today, only the values of Role.ADMIN and
        # Role.MEMBER are accepted, which indicates a principal of role type
        # ADMIN and role type MEMBER respectively.
        AdminPrincipal: Role.ADMIN

        # AnchorPeers defines the location of peers which can be used for
        # cross-org gossip communication. Note, this value is only encoded in
        # the genesis block in the Application section context.
        AnchorPeers:
            - Host: peer2.1
              Port: 7051

################################################################################
#
#   ORDERER
#
#   This section defines the values to encode into a config transaction or
#   genesis block for orderer related parameters.
#
################################################################################
Orderer: &OrdererDefaults

    # Orderer Type: The orderer implementation to start.
    # Available types are "solo" and "kafka".
    OrdererType: solo
    
    # Addresses here is a nonexhaustive list of orderers the peers and clients can 
    # connect to. Adding/removing nodes from this list has no impact on their 
    # participation in ordering. 
    # NOTE: In the solo case, this should be a one-item list.
    Addresses:
        - orderer0:7050

    # Batch Timeout: The amount of time to wait before creating a batch.
    BatchTimeout: 2s

    # Batch Size: Controls the number of messages batched into a block.
    BatchSize:

        # Max Message Count: The maximum number of messages to permit in a
        # batch.
        MaxMessageCount: 10

        # Absolute Max Bytes: The absolute maximum number of bytes allowed for
        # the serialized messages in a batch. If the "kafka" OrdererType is
        # selected, set 'message.max.bytes' and 'replica.fetch.max.bytes' on
        # the Kafka brokers to a value that is larger than this one.
        AbsoluteMaxBytes: 10 MB

        # Preferred Max Bytes: The preferred maximum number of bytes allowed
        # for the serialized messages in a batch. A message larger than the
        # preferred max bytes will result in a batch larger than preferred max
        # bytes.
        PreferredMaxBytes: 512 KB

    # Max Channels is the maximum number of channels to allow on the ordering
    # network. When set to 0, this implies no maximum number of channels.
    MaxChannels: 0

    Kafka:
        # Brokers: A list of Kafka brokers to which the orderer connects. Edit
        # this list to identify the brokers of the ordering service.
        # NOTE: Use IP:port notation.
        Brokers:
            - kafka0:9092
            - kafka1:9092
            - kafka2:9092

    # Organizations lists the orgs participating on the orderer side of the
    # network.
    Organizations:

################################################################################
#
#   APPLICATION
#
#   This section defines the values to encode into a config transaction or
#   genesis block for application-related parameters.
#
################################################################################
Application: &ApplicationDefaults

    # Organizations lists the orgs participating on the application side of the
    # network.
    Organizations:

################################################################################
#
#   CAPABILITIES
#
#   This section defines the capabilities of fabric network. This is a new
#   concept as of v1.1.0 and should not be utilized in mixed networks with
#   v1.0.x peers and orderers.  Capabilities define features which must be
#   present in a fabric binary for that binary to safely participate in the
#   fabric network.  For instance, if a new MSP type is added, newer binaries
#   might recognize and validate the signatures from this type, while older
#   binaries without this support would be unable to validate those
#   transactions.  This could lead to different versions of the fabric binaries
#   having different world states.  Instead, defining a capability for a channel
#   informs those binaries without this capability that they must cease
#   processing transactions until they have been upgraded.  For v1.0.x if any
#   capabilities are defined (including a map with all capabilities turned off)
#   then the v1.0.x peer will deliberately crash.
#
################################################################################
Capabilities:
    # Channel capabilities apply to both the orderers and the peers and must be
    # supported by both.  Set the value of the capability to true to require it.
    Channel: &ChannelCapabilities
        # V1.1 for Channel is a catchall flag for behavior which has been
        # determined to be desired for all orderers and peers running v1.0.x,
        # but the modification of which would cause incompatibilities.  Users
        # should leave this flag set to true.
        V1_1: true

    # Orderer capabilities apply only to the orderers, and may be safely
    # manipulated without concern for upgrading peers.  Set the value of the
    # capability to true to require it.
    Orderer: &OrdererCapabilities
        # V1.1 for Order is a catchall flag for behavior which has been
        # determined to be desired for all orderers running v1.0.x, but the
        # modification of which  would cause incompatibilities.  Users should
        # leave this flag set to true.
        V1_1: true

    # Application capabilities apply only to the peer network, and may be
    # safely manipulated without concern for upgrading orderers.  Set the value
    # of the capability to true to require it.
    Application: &ApplicationCapabilities
        # V1.1 for Application is a catchall flag for behavior which has been
        # determined to be desired for all peers running v1.0.x, but the
        # modification of which would cause incompatibilities.  Users should
        # leave this flag set to true.
        V1_1: true
        # V1_1_PVTDATA_EXPERIMENTAL is an Application capability to enable the
        # private data capability.  It is only supported when using peers built
        # with experimental build tag.  When set to true, private data
        # collections can be configured upon chaincode instantiation and
        # utilized within chaincode Invokes.
        # NOTE: Use of this feature with non "experimental" binaries on the
        # network may cause a fork.
        V1_1_PVTDATA_EXPERIMENTAL: false
        # V1_1_RESOURCETREE_EXPERIMENTAL is an Application capability to enable
        # the resources capability. Currently this is needed for defining
        # resource-based access control (RBAC). RBAC helps set fine-grained
        # access control on system resources such as the endorser and various
        # system chaincodes. Default is v1.0-based access control based on
        # CHANNEL_READERS and CHANNEL_WRITERS.
        # NOTE: Use of this feature with non "experimental" binaries on
        # the network may cause a fork.
        V1_1_RESOURCETREE_EXPERIMENTAL: false
